@page "/lists/"
@attribute [Authorize]
@inject IShoppingService ShoppingService
@inject IJSRuntime JS

<CreateList />

<hr />

@if (_shoppingLists is null)
{
    <p>Loading ... </p>
}
else
{
    <div class="list-group">

        @foreach (var item in _shoppingLists)
        {
            <a href="./lists/@item.Id" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                <span style="flex: 1">
                    @item.Title
                </span>
                @* <span class="badge bg-primary rounded-pill">14</span> *@

                @if (item.Favorite)
                {
                    <a href="#" class="btn btn-sm btn-warning"
                       title="Remove from favorites"
                       @onclick="async () => await UpdateFavorite(item.Id, false)"
                    @onclick:preventDefault>
                        <i class="oi oi-star"></i>
                    </a>
                }
                else
                {
                    <a href="#" class="btn btn-sm btn-outline-secondary"
                       title="Add to favorites"
                       @onclick="async () => await UpdateFavorite(item.Id, true)"
                    @onclick:preventDefault>
                        <i class="oi oi-star"></i>
                    </a>
                }


                <a href="#" class="btn btn-sm btn-outline-danger ms-2" title="delete"
                   @onclick="async () => await Delete(item.Id)"
                @onclick:preventDefault>
                    <i class="oi oi-trash"></i>
                </a>
            </a>
        }
    </div>
}

@code {
    private IEnumerable<ShoppingList>? _shoppingLists;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        _shoppingLists = await ShoppingService.GetShoppingListsAsync();
    }

    private async Task UpdateFavorite(Guid shoppingList, bool favorite)
    {
        await ShoppingService.SetShoppingListFavoriteAsync(shoppingList, favorite);
        await Refresh();
    }

    private async Task Delete(Guid shoppingList)
    {
        var result = await JS.InvokeAsync<bool>("confirm", "Are you sure?");
        if (result)
        {
            await ShoppingService.DeleteShoppingListAsync(shoppingList);
            await Refresh();
        }
    }
}